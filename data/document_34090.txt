Data Rationalization. PROCESS. DUNS® NUMBER. BENEFITS. An accurate and rationalized database means that you can take full advantage of opportunities to streamline your business and serve your customers more effectively.
Data Rationalization is a Managed Meta Data Environment (MME) enabled application which creates/extends an ontology for a domain into the structured data world, based on model objects stored in various models (of varying levels of detail, across model files and modeling tools) and other meta data.
Summary. Data Rationalization is a powerful means to unlock and leverage semantics hidden in models, and to be able to find, identify, and leverage the data we need. Tying a formal ontology (e.g. stored in OWL) to model objects can help bridge the semantic divide between unstructured and structured data.
A very simplistic example of a Data Rationalization analysis might be an analyst wishing to understand the relationship between two tables. Assume the analyst doesn’t have a modeling tool license, doesn’t know what model to look for, or doesn’t have access to the network share where the models are stored.
Do not use multiple fields in a single table to store similar data. For example, to track an inventory item that may come from two possible sources, an inventory record may contain fields for Vendor Code 1 and Vendor Code 2.
Normalization is the process of organizing data in a database. This includes creating tables and establishing relationships between those tables according to rules designed both to protect the data and to make the database more flexible by eliminating redundancy and inconsistent dependency.
With Data Rationalization, we’re not trying to find where an actual piece of data came from (i.e. source to target), but what higher order model objects the data was conceived from or help to explain it, or which downstream objects implement the higher order model objects (see Figure 1 below).
Rationalization and Redundancy. Grouping logically-related fields into distinct tables, determining key fields, and then relating distinct tables using common key fields is called rationalizing a database. There are two major reasons for designing a database this way: