What ist Java Message Service (JMS) for. JMS is a messaging standard that allows Java EE applications to create, send, receive, and consume messages in a loosely coupled, reliable, and asynchronous way. I'd suggest to read the Java Message Service API Overview for more details. I have found a very good explanation of JMS with an example. That is a simple chat application with JMS queues are used to communicate messages between users and messages stay in the queue if the receiver is offline. In this example implementation they have used. 1  XSD to generate domain classes. 2  Eclipse EE as IDE.
A7; JMS is an acronym used for Java Messaging Service. It is Java's answer to creating software using asynchronous messaging. It is one of the official specifications of the J2EE technologies and is a key technology. JMS is frequently used by EJB's that need to start another process asynchronously. For example, instead of sending an email directly from an Enterprise JavaBean, the bean may choose to put the message onto a JMS queue to be handled by a Message-Driven Bean (another type of EJB) or another system in the enterprise.
I'm looking for (simple) examples of problems for which JMS is a good solution, and also reasons why JMS is a good solution in these cases. In the past I've simply used the database as a means of passing messages from A to B when the message cannot necessarily be processed by B immediately. JMS is an API used to transfer messages between two or more clients. It's specs are defined under JSR 914. JMS are just kind of interfaces/APIs and the concrete classes must be implemented. These are already implemented by various organizations/Providers. they are called JMS providers.
JMS is an acronym used for Java Messaging Service. It is Java's answer to creating software using asynchronous messaging. It is one of the official specifications of the J2EE technologies and is a key technology. 
jms handles publish/subscribe, which is a bit more complicated that the point-to-point example you gave. you are not tied to a specific implementation, and can swap it out if your needs change in the future, w/out messing w/ your java code. JMS is an API used to transfer messages between two or more clients. It's specs are defined under JSR 914. JMS are just kind of interfaces/APIs and the concrete classes must be implemented. These are already implemented by various organizations/Providers. they are called JMS providers.
A1: Java Message Service: An interface implemented by most J2EE containers to provide point-to-point queueing and topic (publish/subscribe) behavior. JMS is frequently used by EJB's that need to start another process asynchronously. For example, instead of sending an email directly from an Enterprise JavaBean, the bean may choose to put the message onto a JMS queue to be handled by a Message-Driven Bean (another type of EJB) or another system in the enterprise.
JMS is used to write business applications to create, send, receive, and read an enterprise messaging systems' messages. The JMS API defines a vendor-neutral, but Java-specific set of interfaces that identify how a JMS client accesses the facilities of an enterprise messaging product. The JMS standard is a part of the Java 2 Platform, Enterprise Edition (J2EE) and can be used to write business applications to create, send, receive and read messages.
When using JMS, the destination object need not be connected to the server if one particular client sends a message to the server. In terms of messaging, JMS supports both “Publish-Subscribe” and “Point to Point” messaging types. In “Publish-Subscribe”, the setup involves multiple publishers sending messages to a “Topic”, and all subscribers to this Topic will receive the messages. Using Java Message Service (JMS) is an easy choice for writing business applications that send and receive data independently from the main program. Java Message Service (JMS) came about as a collaborative effort between Sun Microsystems and a couple of industry players.
From Wikipedia, the free encyclopedia. The Java Message Service (JMS) API is a Java Message Oriented Middleware (MOM) API for sending messages between two or more clients. JMS is a part of the Java Platform, Enterprise Edition, and is defined by a specification developed under the Java Community Process as JSR 914. The same Java classes can be used to communicate with different JMS providers by using the Java Naming and Directory Interface (JNDI) information for the desired provider. The classes first use a connection factory to connect to the queue or topic, and then use populate and send or publish the messages.