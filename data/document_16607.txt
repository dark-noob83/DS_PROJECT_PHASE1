In this article, we will see how to use @@IDENTITY and SCOPE_IDENTITY() in SQL Server 2012. This is a question which is frequently asked in many sites about @@IDENTITY and SCOPE_IDENTITY(). Both are used to return the last inserted identity value in the current session. Here, we will see the difference between them. In this article, we will see how to use  @@IDENTITY and SCOPE_IDENTITY() in SQL Server 2012. This is a question which is frequently asked in many sites about @@IDENTITY and SCOPE_IDENTITY(). Both are used to return the last inserted identity value in the current session
SCOPE_IDENTITY is: 1  SCOPE_IDENTITY returns the last IDENTITY value inserted into an IDENTITY column in the same scope. 2  SCOPE_IDENTITY returns the last identity value generated for any table in the current session and the current scope. 1
This article explains about SCOPE_IDENTITY function in sql server with examples. SCOPE_IDENTITY is used to get last identity value inserted into an identity column in the same scope. Scope can be stored procedure, trigger, function or batch. SCOPE_IDENTITY() will return the IDENTITY value inserted, which was the last INSERT that occurred in the same scope. The SCOPE_IDENTITY() function will return the NULL value if the function is invoked before any insert statements into an identity column occur in the scope. Syntax of SCOPE_IDENTITY() Function: SCOPE_IDENTITY() Return type of above function is a sql_variant.
@@IDENTITY and SCOPE_IDENTITY return the last identity value generated in any table in the current session. However, SCOPE_IDENTITY returns the value only within the current scope; @@IDENTITY is not limited to a specific scope. IDENT_CURRENT is not limited by scope and session; it is limited to a specified table. 
SCOPE_IDENTITY, IDENT_CURRENT, and @@IDENTITY are similar functions because they return values that are inserted into identity columns. IDENT_CURRENT is not limited by scope and session; it is limited to a specified table. IDENT_CURRENT returns the value generated for a specific table in any session and any scope. If you insert a row into the table, @@IDENTITY and SCOPE_IDENTITY() return different values. SCOPE_IDENTITY() returns the value from the insert into the user table, whereas @@IDENTITY returns the value from the insert into the replication system table. Use SCOPE_IDENTITY() for applications that require access to the inserted identity value. Copy. Here is the result set
The SCOPE_IDENTITY() function will return the null value if the function is invoked before any INSERT statements into an identity column occur in the scope. Failed statements and transactions can change the current identity for a table and create gaps in the identity column values. If you insert a row into the table, @@IDENTITY and SCOPE_IDENTITY() return different values. SCOPE_IDENTITY() returns the value from the insert into the user table, whereas @@IDENTITY returns the value from the insert into the replication system table. Use SCOPE_IDENTITY() for applications that require access to the inserted identity value. Copy. Here is the result set
1 SCOPE_IDENTITY and @@IDENTITY will return the last identity values generated in any table in the current session. 2  However, SCOPE_IDENTITY returns values inserted only within the current scope; @@IDENTITY is not limited to a specific scope. 3  A scope is a module; a Stored Procedure, trigger, function, or batch. 1 SCOPE_IDENTITY returns the last IDENTITY value inserted into an IDENTITY column in the same scope. 2  SCOPE_IDENTITY returns the last identity value generated for any table in the current session and the current scope.
SCOPE_IDENTITY and @@IDENTITY return the last identity values that are generated in any table in the current session. However, SCOPE_IDENTITY returns values inserted only within the current scope; @@IDENTITY is not limited to a specific scope. The SCOPE_IDENTITY() function will return the null value if the function is invoked before any INSERT statements into an identity column occur in the scope. Failed statements and transactions can change the current identity for a table and create gaps in the identity column values.