Now, if you pass an object that is based on this type to a method, a reference to the object is passed. The following example passes an object of type SampleRefType to method ModifyObject. C#. Copy. The example does essentially the same thing as the previous example in that it passes an argument by value to a method. Methods with a non-void return type are required to use the return keyword to return a value. For example, these two methods use the return keyword to return integers: C#. Copy. To use a value returned from a method, the calling method can use the method call itself anywhere a value of the same type would be sufficient.
Next Page. An attribute is a declarative tag that is used to convey information to runtime about the behaviors of various elements like classes, methods, structures, enumerators, assemblies etc. in your program. You can add declarative information to a program by using an attribute. 
Just type /// right before your methods and VS will generate some xml tags. These will be used to show the tooltip as well as parameter info aso. Screenshot of my VS2010 when calling method add. As you can see, xml comments are shown. 
You can pass a value-type by reference by using the ref keyword. For more information, see Passing Value-Type Parameters (C# Programming Guide) . For a list of built-in value types, see Value Types Table (C# Reference) . When an object of a reference type is passed to a method, a reference to the object is passed. Methods with a non-void return type are required to use the return keyword to return a value. For example, these two methods use the return keyword to return integers: C#. Copy. To use a value returned from a method, the calling method can use the method call itself anywhere a value of the same type would be sufficient.
Next: The event keyword is used to create an instance of an event that can store methods in its invocation list. Next: In the invocation list of the _show event, we add four events: Dog, Cat and two instances of Mouse. Finally: When the Invoke method is called, each of those method instances are called. 
Note. A return type of a method is not part of the signature of the method for the purposes of method overloading. However, it is part of the signature of the method when determining the compatibility between a delegate and the method that it points to. Methods with a non-void return type are required to use the return keyword to return a value. For example, these two methods use the return keyword to return integers: C#. Copy. To use a value returned from a method, the calling method can use the method call itself anywhere a value of the same type would be sufficient.
You are now ready to start coding! This chapter is the first of a series that will introduce you to how classes are created and used in C#. It covers the basics of creating and using classes. You will create classes, add attributes and methods, and instantiate object instances of the classes in client code. After reading this chapter, you should be familiar with the following: 1  How objects used in OOP depend on class definition files. 2  The important role encapsulation plays in OOP
Extension methods enable you to add methods to existing types without creating a new derived type, recompiling, or otherwise modifying the original type. Extension methods are a special kind of static method, but they are called as if they were instance methods on the extended type. For client code written in C# and Visual Basic, there is no apparent difference between calling an extension method and the methods that are actually defined in a type. To enable extension methods for a particular type, just add a using directive for the namespace in which the methods are defined. For example, to use the standard query operators, add this using directive to your code:
A delegate is an object that refers to a static method or an instance method. In this article I discuss what delegates are, how you can create and use them, and how the C# compiler saves us time by generating the delegateâ€™s class. A delegate is an object that is created to refer to a static method or an instance method, and then used to call this method. To start off, you create a new delegate type in a different way than you create any other class. You use the delegate keyword as in the following statement