nohup catches the hangup signal (see man 7 signal) while the ampersand doesn't (except the shell is confgured that way or doesn't send SIGHUP at all).
In Unix, a background process executes independently of the shell, leaving the terminal free for other work. To run a process in the background, include an & (an ampersand) at the end of the command you use to run the job.
OR. nohup /path/to/command-name arg1 arg2 &. Where, 1  command-name: is name of shell script or command name. 2  You can pass argument to command or a shell script. & : 3  nohup does not automatically put the command it runs in the background; you must do that explicitly, by ending the command line with an & symbol.
When you execute a Unix job in the background (using &, bg command), and logout from the session, your process will get killed. You can avoid this using several methods â€” executing the job with nohup, or making it as batch job using at, batch or cron command. This quick tip is for beginners.
nohup command [arguments]. You may optionally add an ampersand to the end of the command line to run the job in the background: nohup command [arguments] &. If you do not redirect output from a process kicked off with nohup, both standard output (stdout) and standard error (stderr) are sent to a file named nohup.out.