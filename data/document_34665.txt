Store-and-forward. Now to scale this up to two brokers, Broker1 and Broker2. In ActiveMQ a network of brokers is set up by connecting a networkConnector to a transportConnector (think of it as a socket listening on a port). A networkConnector is an outbound connection from one broker to another. 
From Wikipedia, the free encyclopedia. Apache ActiveMQ is an open source message broker written in Java together with a full Java Message Service (JMS) client. It provides Enterprise Features which in this case means fostering the communication from more than one client or server. The communication is managed with features such as computer clustering and ability to use any database as a JMS persistence provider besides virtual memory, cache, and journal persistency. ActiveMQ is used in enterprise service bus implementations such as Apache ServiceMix and Mule.
Available as of Camel 2.11. This example shows how you can embed Apache ActiveMQ Broker and Camel in a web application, which can run on Apache Tomcat or other web containers. This example embeds ActiveMQ Broker and a Camel application which will continuously send a message per second to an inbox queue. Then another Camel route will route messages from the inbox to the outbox queue.
Connecting to a JMS Message Broker. This tutorial uses an example module to provide a fulcrum configured to send and receive JMS messages using ActiveMQ 4.1.1 http://activemq.apache.org/ . It is designed as an example of how to configure NetKernel for a specific JMS implementation. Prior to installing the NetKernel module you will need to have downloaded and installed ActiveMQ 4.1.1 or later and have a message broker started on localhost using its default settings. For more information visit: http://activemq.apache.org/.
Apache ActiveMQ, ActiveMQ, Apache, the Apache feather logo, and the Apache ActiveMQ project logo are trademarks of The Apache Software Foundation. All other marks mentioned may be trademarks or registered trademarks of their respective owners. 
Using connection pooling. When sending to an ActiveMQ broker using Camel it's recommended to use a pooled connection factory to efficiently handle pooling of JMS connections, sessions and producers. This is documented on the ActiveMQ Spring Support page. To use this component make sure you have the activemq.jar or activemq-core.jar on your classpath along with any Camel dependencies such as camel-core.jar, camel-spring.jar and camel-jms.jar. Transacted and caching.
Testing. When you have installed ActiveMQ and have a message broker started on your local machine and have installed the NetKernel module, the test message can be initiated with a web-request to http://localhost:8080/activemq/send. Prior to installing the NetKernel module you will need to have downloaded and installed ActiveMQ 4.1.1 or later and have a message broker started on localhost using its default settings. For more information visit: http://activemq.apache.org/.
Overview to Apache ActiveMQ. Apache ActiveMQ is a message broker which fully implements the Java Messaging Service API 1.1.It can be used by programs written Java,C/C++,.NET,PHP etc.The list of supporting platforms and languages can be read from the ActiveMQ page. JMS Example using Apache ActiveMQ. In this section we are looking into a JMS example,which involves two JMS clients.First client sends a message to a queue destination. The second client retrieves the message from the