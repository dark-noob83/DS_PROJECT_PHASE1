(C++ provides a slightly simpler interface with JNI.) When the JVM invokes the function, it passes a JNIEnv pointer, a jobject pointer, and any Java arguments declared by the Java method. A JNI function may look like this: The env pointer is a structure that contains the interface to the JVM. It includes all of the functions necessary to interact with the JVM and to work with Java objects.
The Java Native Interface (JNI) is a native programming interface that is part of the Java Software Development Kit (SDK). JNI lets Java code use code and code libraries written in other languages, such as C and C++. The Invocation API, which is part of JNI, can be used to embed a Java virtual machine (JVM) into native applications, thereby allowing programmers to call Java code from within native code. This tutorial will walk you through the steps of using the Java Native Interface. You'll learn how to call native C/C++ code from within a Java application and how to call Java code from within a native C/C++ application.
The Java Native Interface (JNI) is a programming framework that enables Java code running in a Java Virtual Machine (JVM) to call, and to be called by, native applications (programs specific to a hardware and operating system platform) and libraries written in other languages such as C, C++ and assembly. 
The Java Native Interface (JNI) enables Java code running in a Java Virtual Machine (JVM) to call and to be called by native applications (programs specific to a hardware and operating system platform) and libraries written in other languages, such as C, C++ and assembly. C++ provides a slightly simpler interface with JNI. When the JVM invokes the function, it passes a JNIEnv pointer, a jobject pointer, and any Java arguments declared by the Java method. A JNI function may look like this: The env pointer is a structure that contains the interface to the JVM.
Java™ Native Interface. Java Native Interface (JNI) is a standard programming interface for writing Java native methods and embedding the Java virtual machine * into native applications. The primary goal is binary compatibility of native method libraries across all Java virtual machine implementations on a given platform. 
JNI is the Java Native Interface. It defines a way for managed code (written in the Java programming language) to interact with native code (written in C/C++). 
This tutorial deals with the two most common applications of JNI: calling C/C++ code from Java programs, and calling Java code from C/C++ programs. We'll cover both the essentials of the Java Native Interface and some of the more advanced programming challenges that can arise. This tutorial will walk you through the steps of using the Java Native Interface. You'll learn how to call native C/C++ code from within a Java application and how to call Java code from within a native C/C++ application.
JNI also has its disadvantages though. It is said that when an error occurs using JNI, the whole Java Virtual Machine environment may be compromised and these types of errors result to debugging concerns on the developers. Software that is written in C language for example may need to work or invoke JNI via Java applets in order for it to work or function efficiently. The Java Native Interface may also be invoked or called by other libraries that are written in other languages.
Best practices for using the Java Native Interface. Techniques and tools for averting the 10 most common JNI programming mistakes. The Java™ Native Interface (JNI) is a standard Java API that enables Java code to integrate with code written in other programming languages. With JNI, native code is free to interact with Java objects, get and set field values, and invoke methods without many of the constraints that apply to the same functions in Java code. This freedom is a double-edged sword: it trades the safety of the Java language for the ability to accomplish the tasks listed earlier.
The JNI (Java Native Interface) is a layer of Java that permits code executing or running in the JVM (Java Virtual Machine) to invoke and to be called by native libraries and applications written in other languages. The JNI is most commonly used with the C++, C, and Assembly programming languages. Typically, code developers will use the JNI to write methods that are natively able to manage situations where the program cannot fully be developed in the Java programming language. The JNI framework allows native code methods to use Java objects similar to how core Java code does. When invoking the JNI, a native method will be able to create Java objects, inspect them, and use them to conduct tasks.