Shallow Copy and Deep Copy in C++: When you copy an object of user define class to another object, the default copy constructor gets invoked, if copy constructor is not implemented, and it will do a member wise copy of the value.
A deep copy copies all fields, and makes copies of dynamically allocated memory pointed to by the fields. To make a deep copy, you must write a copy constructor and overload the assignment operator, otherwise the copy will point to the original, with disasterous consequences. The pointer will be copied. but the memory it points to will not be copied -- the field in both the original object and the copy will then point to the same dynamically allocated memory, which is not usually what you want. The default copy constructor and assignment operator make shallow copies.
1. The terms deep vs shallow copy aren't typically used in C++, since they don't map particularly well to the language. In Java and several other languages, the distinction is more useful because of their reference-based semantics, making shallow copy unavoidable in most cases. 1. The default copy constructor makes a member-wise copy, and whether a deep or shallow copy is made of a member depends entirely on the behavior of members. struct Person { string firstName, lastName; } - the default copy constructor makes a deep copy.
Difference between Deep copy and Shallow copy in C++. So what is the difference between 'Deep copy' (sometimes referred to as 'Hard copy') and 'Shallow copy' in C++. Shallow copy: Copies the member values from one object into another. Deep Copy: Copies the member values from one object into another. Any pointer objects are duplicated and Deep Copied. 
Shallow copy is a bit-wise copy of an object. A new object is created that has an exact copy of the values in the original object. If any of the fields of the object are references to other objects, just the reference addresses are copied i.e., only the memory address is copied. A deep copy copies all fields, and makes copies of dynamically allocated memory pointed to by the fields. A deep copy occurs when an object is copied along with the objects to which it refers.
C++ Notes: Shallow vs Deep Copies. A shallow copy of an object copies all of the member field values. This works well if the fields are values, but may not be what you want for fields that point to dynamically allocated memory. The pointer will be copied. but the memory it points to will not be copied -- the field in both the original object and the copy will then point to the same dynamically allocated memory, which is not usually what you want. The default copy constructor and assignment operator make shallow copies.
A deep copy copies all fields, and makes copies of dynamically allocated memory pointed to by the fields. A deep copy occurs when an object is copied along with the objects to which it refers. Shallow Copy. Shallow copy is a bit-wise copy of an object. A new object is created that has an exact copy of the values in the original object. When you have enormous number of pointers to deal with in C++ or C, doing a shallow copy of an object is REALLY a bad idea. EXAMPLE_OF_DEEP COPY_ An example is, when you are trying to do image processing and object recognition you need to mask Irrelevant and Repetitive Motion out of your processing areas.