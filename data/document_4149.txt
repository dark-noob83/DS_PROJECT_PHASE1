Syntax. Following is the syntax to read the records when the file access mode is sequential: Following are the parameters used: NEXT RECORD is optional and is specified when an indexed sequential file is being read sequentially. Write statement can be used with FROM option to directly write records from the working storage variables. From is an optional clause. If the access mode is sequential, then to write a record,s the file must open in Output mode or Extend mode.
Explore COBOL calls Assembler for VSAM, KSDS Access for an example of a COBOL program calling an Assembler I/O routine. The COBOL program is written using the COBOL/2 dialect but also work with COBOL for MVS and COBOL/370. The Assembler program was written using Assembler/H on the mainframe. Explore COBOL calls COBOL for VSAM, KSDS Access for an example of a COBOL program calling a COBOL I/O routine. The COBOL program is written using COBOL/2 dialect but also works with COBOL for MVS, COBOL/370 and COBOL for 390. A JCL member is provided to run the job as an MVS or ZOS batch job on an IBM mainframe or as a project with Micro Focus Mainframe Express (MFE) running on a Windows System.
The result is a single Assembler routine which is called from COBOL to access any VSAM dataset in any valid combination of dataset organization, access, and mode. Anyone who really wants to do anything worthwhile with COBOL, even if it is just a beginner learning to write some COBOL, cannot be pleased that the COBOL compiler we have available to us (the one bundled in with MVT), cannot handle VSAM files directly.
The DATA DIVISION of a COBOL (sub)program contains two sections, the FILE SECTION and the WORKING-STORGAGE SECTION. The latter is used to describe, via data description entries (level numbers, PICTURE clauses, etc.), the hierarchical structure of data items that exist during execution of the program. Random Access form of READ, WRITE, and REWRITE for INDEXED files. 1  Place desired value into the key field (in the file's data record). 2  Place desired contents into file's data record (or the data item specified in the FROM clause).
So I sat down with a matrix of organization, access type, and mode that is available with a modern COBOL compiler and did some research to see how I could provide most of this functionality to the ancient compiler we had available. Anyone who really wants to do anything worthwhile with COBOL, even if it is just a beginner learning to write some COBOL, cannot be pleased that the COBOL compiler we have available to us (the one bundled in with MVT), cannot handle VSAM files directly.
Sequential Access Mode. For an indexed or relative file in sequential access mode, 1  When the DELETE statement is processed, the system logically removes the record retrieved and locked by the READ statement. 2  for information about file and record locking. If the last input/output statement was a successfully processed READ statement with the NO LOCK phrase: 1  The file status key, if defined, is set to 9S. 2  The EXCEPTION/ERROR procedure, if any, is run. 3  The DELETE statement is not processed.