1 When you compile a project containing SpecFlow feature files, the output is an NUnit test assembly, so you can use your favourite NUnit-compatible test runner or existing CI infrastructure to run the specifications with no additional configuration. If, for some reason, you don’t want to use SpecFlow and would rather run the original Ruby-based Cucumber tool, there are two main options for .NET programmers: 1  Use IronRuby. 2  Use Cuke4Nuke.
You can also run runtests.cmd from the command prompt to execute your specification tests. SpecFlow+ Runner has a lot more to offer: This section guides you through the process of installing SpecFlow and SpecFlow+ Runner and setting up a simple project in Visual Studio. 
Step definitions and other bindings are global in SpecFlow. This means that regardless of the way you split the step definition methods into multiple classes, finally they will be put to a global registry. Whenever SpecFlow executes a step, it tries to find the one and only step definition matching to the step text. 
The “SpecFlow Step Definition” item is just a *.cs class file that we would put the individual step functions in for the tests to call. Both the Feature File and Step Definition file are populated with an addition sample as part of their template.. Back in Visual Studio I will create a new “SpecFlow Step Definition” file and copy the content of the Nunit Text output window into the class in this file, removing the unnecessary addition example steps and all the extra class definitions and plain text.
1 Normal Specflow tests do not test exactly what the user will experience. 2  Unfortunately Coded UI Tests have been known to be brittle and this is defiantly something you need to be aware of. 3  With older technology Coded UI Tests uses MSAA (Microsoft Active Accessibility) to find property values of a control. How to create an Automated UI Specflow Feature. This sample assumes you have a good understanding of Specflow and Coded UI Tests. 1  Create a Specflow Feature file. 2  Record your Coded UI test methods. 3  Wire up the Specflow step definitions with a Coded UI test methods.
And the dev side matters more with this solution, as Gherkin *is* a dev solution. That doesn’t mean Gherkin and SpecFlow are bad, though. Managers aside, developers have a need to explain *to other programmers* what our complicated systems are doing. I started watching a Pluralsight course about SpecFlow and flubbing my way through it in episodes of my series. But as it turns out, I picked up SpecFlow quickly. Like, really quickly. As much as I’d like to think that this is because I’m some kind of genius, that’s not the explanation by a long shot.
52 Responses to Behavior Driven Development (BDD) with SpecFlow and ASP.NET MVC. I’ve been doing BDD style tests from the controller down for a while now, but I always knew I was missing the part that was important to the end user. If, for some reason, you don’t want to use SpecFlow and would rather run the original Ruby-based Cucumber tool, there are two main options for .NET programmers: 1  Use IronRuby. 2  Use Cuke4Nuke.
In order to make this happen we will need to extend the SpecFlow. If you search for the information on how to do that, you will quickly find that you can define a generatorProvider for your unitTestProvider. It can be a quick fix and there are plenty of articles about this approach. 1 RegisterCustomizations – If you are extending any of the components of SpecFlow, you can register your implementation at this stage. 2  RegisterDependencies – In case your plugin is of a complex nature and it has it’s own dependencies, this can be the right place to set your Composition Root.
SpecFlow follows a specific pattern that relies on keywords that help describe the feature whose behavior you’re defining. The keywords come from a language called Gherkin (yes, as in pickle), and this all originates from a tool called Cucumber (cukes.info). So far you’ve seen the Feature item and the color-coding that SpecFlow provides. Note that there’s a codebehind file attached to the feature file, which has some empty tests that were created based on the features. Each of those tests will execute the steps in your scenario, but you do need to create those steps.