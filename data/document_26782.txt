The #define directive takes two forms: defining a constant and creating a macro. When defining a constant, you may optionally elect not to provide a value for that constant. In this case, the token will be replaced with blank text, but will be defined for the purposes of #ifdef and ifndef. If a value is provided, the given token will be replaced literally with the remainder of the text on the line. You should be careful when using #define in this way; see this article on the c preprocessor for a list of gotchas. For instance, here is a standard way of writing a macro to return the max of two values. Note that when writing macros there are a lot of small gotchas; you can read more about it here: the c preprocessor
Define. #define is a useful C component that allows the programmer to give a name to a constant value before the program is compiled. Defined constants in arduino don't take up any program memory space on the chip. The compiler will replace references to these constants with the defined value at compile time.
The C preprocessor or cpp is the macro preprocessor for the C and C++ computer programming languages. The preprocessor provides the ability for the inclusion of header files, macro expansions, conditional compilation, and line control. In many C implementations, it is a separate program invoked by the compiler as the first part of translation.
The #undef directive causes an identifier's preprocessor definition to be forgotten. See The #undef Directive for more information. If the name of the macro being defined occurs in token-string (even as a result of another macro expansion), it is not expanded. A second #define for a macro with the same name generates a warning unless the second token sequence is identical to the first.
The preprocessor directive is also called as macros templates. The #define preprocessor directive is used to predefine a constant value in a C or C++ program. The main advantage of using macros templates is, it makes the program easier to read and edit. In one of my earlier posts, I have already described the advantages of using constants in C, C++ programming languages. How to use #define preprocessor directives in C. C program, flowchart, pseudo code showing how to use #define preprocessor in C language to calculate volume and surface area of a sphere.
The #define creates a macro, which is the association of an identifier or parameterized identifier with a token string. After the macro is defined, the compiler can substitute the token string for each occurrence of the identifier in the source file. If the name of the macro being defined occurs in token-string (even as a result of another macro expansion), it is not expanded. A second #define for a macro with the same name generates a warning unless the second token sequence is identical to the first.
Report Abuse. The # operators in c are preprocessor instructions. That means that they are translated before the compile happens. The #define is used to define a preprocessor variable that can be used in the code. This is a way of actually commenting the source code. So I could code #define PI 3.14159265 cir = r * r * PI; Everywhere that I want to use pi I can use the #define and it will be translated to the number before the compile. 
The #define directive causes the compiler to substitute token-string for each occurrence of identifier in the source file. The identifier is replaced only when it forms a token. If the name of the macro being defined occurs in token-string (even as a result of another macro expansion), it is not expanded. A second #define for a macro with the same name generates a warning unless the second token sequence is identical to the first.