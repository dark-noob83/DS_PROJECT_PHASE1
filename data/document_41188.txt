What we do here is use the PerformanceCounter to monitor the idle process CPU usage as we know that the real CPU usage is 100% - idle CPU usage% (you can also do this by monitoring the _Total value and 100 - _Total == idle CPU usage). I created a PerformanceCounter for the CPU idle process and got its usage %, then I used Process.GetProcesses() to get a Process[] array.
Save. Determining the amount of memory used by a process running on a Linux platform is a tricky proposition. The values for memory usage reported by the operating system are imprecise. When using the built-in utilities provided with Linux, it is important to understand the memory usage statistics and how they're calculated. 
1 System time is the amount of time the CPU was busy executing code in kernel space. 2  If this value is reported for a thread or process, then it represents the amount of time the kernel was doing work on behalf of the executing context, for example, after a thread issued a system call. 1 Idle time (for the whole system only) is the amount of time the CPU was not busy, or, otherwise, the amount of time it executed the System Idle process.
The top command is generally used to check memory and cpu usage per process. However it also reports total memory usage and can be used to monitor the total RAM usage. The header on output has the required information. Here is a sample output. Check the KiB Mem and KiB Swap lines on the header. The free command is the most simple and easy to use command to check memory usage on linux. Here is a quick example. The m option displays all data in MBs. The total os 7976 MB is the total amount of RAM installed on the system, that is 8GB.
To find the problem process, open Task Manager and click the Processes tab to see a list of running processes, like the one that Figure 1 shows. (You can click the CPU column header to sort the list of processes by their CPU utilization.) Make a note of which process is monopolizing the CPU time. If IIS is causing the problem, the offending process will be inetinfo.exe or the out-of-process (OOP) executable dllhost.exe (Windows 2000) or mtx.exe (Windows NT 4.0).
The solution. I created a PerformanceCounter for the CPU idle process and got its usage %, then I used Process.GetProcesses() to get a Process[] array. The Process class has a property called TotalProcessorTime.TotalMilliseconds which gives us how much time the processor has spent on this process
I want to know the CPU utilization of a process and all the child processes, for a fixed period of time, in Linux. To be more specific, here is my use-case: There is a process which waits for a request from the user to execute the programs. So, if user submits 15 programs, then 3 batches of 5 child processes each will run. Child processes are killed as soon as they finish their execution of the program. I want to know about % CPU Utilization for the parent process and all its child process during the execution of those 15 programs.
Might not be the exact command. But you can do something like below to get cpu usage of various process and add it. #ps-C sendmail,firefox-o pcpu= | awk '{s+=$1} END {print s}'. /proc/[pid]/stat Status information about the process. This is used by ps and made into human readable form. So, if user submits 15 programs, then 3 batches of 5 child processes each will run. Child processes are killed as soon as they finish their execution of the program. I want to know about % CPU Utilization for the parent process and all its child process during the execution of those 15 programs.
Optimizing the application can lower CPU utilization. An efficient way to determine CPU usage is to use the Processor:% Processor Time counter in System Monitor. This counter monitors the amount of time the CPU spends executing a thread that is not idle. A consistent state of 80 percent to 90 percent may indicate the need to upgrade your CPU or add more processors. 
Assuming that the parent process waits for its children then the total CPU usage can be calculated from utime, stime, cutime and cstime : utime %lu. Amount of time that this process has been scheduled in user mode, measured in clock ticks (divide by sysconf(_SC_CLK_TCK). So, if user submits 15 programs, then 3 batches of 5 child processes each will run. Child processes are killed as soon as they finish their execution of the program. I want to know about % CPU Utilization for the parent process and all its child process during the execution of those 15 programs.