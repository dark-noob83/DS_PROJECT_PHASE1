But most of the time, there's no explaination about it. For example, I recently read this sentence thrown into an explanation intended for beginning students. ... because the return type of this method is IEnumerable, you must use the CType function to explicitly cast the returned object to a DataView object ....
The interface defines only the signatures of the members and not their internal workings.. This means that an interface is a definition of what an object does, but it doesn't say how the object does it. Here's an example to illustrate that  what versus how  difference. Suppose you defined an interface called IRun. For example, I recently read this sentence thrown into an explanation intended for beginning students. ... because the return type of this method is IEnumerable, you must use the CType function to explicitly cast the returned object to a DataView object ....
Implementing IEnumerable essentially means that the object can be iterated over. This doesn't necessarily mean it is an array as there are certain lists that can't be indexed but you can enumerate them. IEnumerator is the actual object used to perform the iterations. IEnumerable, IEnumerator vs foreach, when to use what What is the difference between IEnumerator and IEnumerable? Enumerator preserves the state (iteration position) between function calls while iterations the other hand Enumerable does not.
We can pass Lists or arrays to it. Also: We can implement IEnumerable on a type to provide support for the foreach-loop. This is done through the GetEnumerator method. Foreach: We use IEnumerable and the foreach-loop to access, in sequence, all items in a 2D array. We can abstract the loop itself out. Foreach: On an IEnumerable variable, we can also use the foreach-loop. This loop iterates with simple syntax. Tip: We can apply many transformations to an IEnumerable instance, including the ToList and ToArray conversions. Next: Display() receives an IEnumerable argument.
Implementing IEnumerable makes using foreach possible. When you write code like: it's functionally equivalent to writing: By functionally equivalent, I mean that's actually what the compiler turns the code into. You can't use foreach on baz in this example unless baz implements IEnumerable. IEnumerable, IEnumerator vs foreach, when to use what What is the difference between IEnumerator and IEnumerable? Enumerator preserves the state (iteration position) between function calls while iterations the other hand Enumerable does not.
As you can see the interface inherits from the IEnumerable interface. Therefore a type which implements has also to implement the members of IEnumerable. defines a single method GetEnumerator which returns an instance of an object that implements the interface. We won’t have a look at this interface this time. We won’t have a look at the definition of the IEnumerator interface this time, but if you are interested, please visit the official msdn documentation. It is important to know that the C# language foreach keyword works with all types that implement the IEnumerable interface. Only in C# 
The IEnumerable interface is located in the System.Collections namespace and contains only a single method definition. The interface definition looks like this: The GetEnumerator method must return an instance of an object of a class which implements the IEnumerator interface. We won’t have a look at the definition of the IEnumerator interface this time, but if you are interested, please visit the official msdn documentation. It is important to know that the C# language foreach keyword works with all types that implement the IEnumerable interface. Only in C# 
IEnumerable is the base interface for all non-generic collections that can be enumerated. For the generic version of this interface see. IEnumerable contains a single method, GetEnumerator, which returns an IEnumerator. IEnumerator provides the ability to iterate through the collection by exposing a Current property and MoveNext and Reset methods. If your collection does not implement IEnumerable, you must still follow the iterator pattern to support this syntax by providing a GetEnumerator method that returns an interface, class or struct. When using Visual Basic, you must provide an IEnumerator implementation, which is returned by Get
IEnumerable is a great example of an interface. IEnumerable defines just one method: GetEnumerator. This method returns an Enumerator object for a collection and that lets you step through the collection with the For ... Each syntax. In turn, the Enumerator object implements the IEnumerator interface of the System.Collections namesp