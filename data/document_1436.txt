C++ Examples: Returning a Pointer. Instead of a regular value or even a reference, a function can return a pointer. You can start to specify this by typing the * operator on the left side of the function's name. Here is an example: Then, use the body of the function to define it.
Returning a pointer from a function is especially fraught with risk, because the pointer is initialized in a totally different piece of code (that's often not even visible to the caller), and the callers do not know how to treat the result. A good documentation for such functions is very important.
To do so, you would have to declare a function returning a pointer as in the following example: Second point to remember is that, it is not good idea to return the address of a local variable to outside of the function so you would have to define the local variable as static variable.
Rather than returning an array with return (newArray) , you return a pointer to the first element of newArray. The problem is that you're allocating the array the wrong way. If you instantiate it with int newArray[n] , memory gets allocated on the current stack frame.
When returning a pointer from a function, do not return a pointer that points to a value that is local to the function or that is a pointer to a function argument. Pointers to local variables become invalid when the function exits. In the above function, the value returned points to a static variable.