The message driven POJO implementation: The implementation of the message driven POJO is tagged with the @Consumer annotation. You can specify the message queue property in the annotation attribute. If a message queue is un-defined, the EJB container will create one for you at server start-up. In POJO model, it is recommended that, interfaces should be explicitly implemented whenever you want to pick and choose the methods of the interface. The interfaces are optional for entity beans but required for session beans and message-driven beans.
A POJO is a Java object that doesn't implement any special interfaces such as those defined by the EJB 2 framework. Martin Fowler, Rebbecca Parsons, and Josh MacKenzie coined the name to give regular Java objects an exciting-sounding name that encouraged developers to use them (www.martinfowler.com/bliki/POJO.html). Instead, the AccountDAO is passed as a constructor parameter. This is an example of what is termed dependency injection, which is one of the key enablers for POJO development (www.martinfowler.com/articles/injection.html).
And, as an added bonus, you can often deploy a POJO application using a simpler, Web container-only application server. In this article, you'll learn about POJO programming. I'll begin by describing the concept of POJOs. Instead, the AccountDAO is passed as a constructor parameter. This is an example of what is termed dependency injection, which is one of the key enablers for POJO development (www.martinfowler.com/articles/injection.html).
POJO, or Plain Old Java Object, is a normal Java object class (that is, not a JavaBean, EntityBean etc.) and does not serve any other special role nor does it implement any special interfaces of any of the Java frameworks. 
up vote 4 down vote. POJO stands for Plain Old Java Object, and would be used to describe the same things as a Normal Class whereas a JavaBean follows a set of rules. Most commonly Beans use getters and setters to protect their member variables, which are typically set to private and have a no-argument constructor. POJO = Plain Old Java Object. It has properties, getters and setters for respective properties. It may also override Object.toString() and Object.equals() .
The interface class in POJO model is a Plain Old Java Interface (POJI). The Benefits of POJOs: Decoupling: It decouples the application components from the infrastructure of the EJB framework that lets you construct an application from loosely coupled components. In POJO model, it is recommended that, interfaces should be explicitly implemented whenever you want to pick and choose the methods of the interface. The interfaces are optional for entity beans but required for session beans and message-driven beans.
One of the new features of added by Sun Microsystems in EJB 3.0 is POJO (Plain Old Java Object). It is a Java object that doesn't extend or implement some specialized classes and interfaces respectively require by the EJB framework. In POJO model, it is recommended that, interfaces should be explicitly implemented whenever you want to pick and choose the methods of the interface. The interfaces are optional for entity beans but required for session beans and message-driven beans.
The term POJO initially denoted a Java object which does not follow any of the major Java object models, conventions, or frameworks; nowadays POJO may be used as an acronym for Plain Old JavaScript Object as well, in which case the term denotes a JavaScript object of similar pedigree. Because of the JavaBean naming conventions the single someProperty reference can be automatically translated to the getSomeProperty() (or isSomeProperty() if the property is of Boolean type) method for getting a value, and to the setSomeProperty(String) method for setting a value.
In software engineering, a plain old Java object (POJO) is an ordinary Java object, not bound by any special restriction. Because of the JavaBean naming conventions the single someProperty reference can be automatically translated to the getSomeProperty() (or isSomeProperty() if the property is of Boolean type) method for getting a value, and to the setSomeProperty(String) method for setting a value.
However, due to technical difficulties and other reasons, many software products or frameworks described as POJO-compliant actually still require the use of prespecified annotations for features such as persistence to work properly. Because of the JavaBean naming conventions the single someProperty reference can be automatically translated to the getSomeProperty() (or isSomeProperty() if the property is of Boolean type) method for getting a value, and to the setSomeProperty(String) method for setting a value.