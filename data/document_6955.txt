What is an interface. Interface looks like class but it is not a class. An interface can have methods and variables just like the class but the methods declared in interface are by default abstract (only method signature, no body). Also, the variables declared in an interface are public, static & final by default. 
Java includes a concept called interfaces. A Java interface is a bit like a class, except a Java interface can only contain method signatures and fields. An Java interface cannot contain an implementation of the methods, only the signature (name, parameters and exceptions) of the method. Here is a simple Java interface example: As you can see, an interface is declared using the Java interface keyword. Just like with classes, a Java interface can be declared public or package scope (no access modifier). The interface example above contains one variable and one method.
An interface in java is a blueprint of a class. It has static constants and abstract methods only.The interface in java is a mechanism to achieve fully abstraction. There can be only abstract methods in the java interface not method body. It is used to achieve fully abstraction and multiple inheritance in Java. An interface is a collection of abstract methods. A class implements an interface, thereby inheriting the abstract methods of the interface. An interface is not a class. An interface contains behaviors(Abstract Methods) that a class implements. Unless the class that implements the interface is abstract, all the methods of the interface need to be defined in the class.Since multiple inheritance is not allowed in java so interface is only way to implement multiple inheritance.
An interface in Java programming language is an abstract type that is used to specify an interface (in the generic sense of the term) that classes must implement. A class that implements an interface must implement all of the methods described in the interface, or be an abstract class. Object references in Java may be specified to be of an interface type; in each case, they must either be null, or be bound to an object that implements the interface.
In above example of interface in Java, SessionIDCreator is an interface while SerialSessionIDCreator is a implementation of interface. @Override annotation can be used on interface method from Java 6 onwards, so always try to use it. Its one of those coding practice which should be in your code review checklist. 
An interface is a reference type in Java, it is similar to class, it is a collection of abstract methods. A class implements an interface, thereby inheriting the abstract methods of the interface. Along with abstract methods an interface may also contain constants, default methods, static methods, and nested types. An interface can contain any number of methods. An interface is written in a file with a .java extension, with the name of the interface matching the name of the file. The byte code of an interface appears in a .class file.
1 An interface can contain any number of methods. 2  In Java you cannot instantiate an interface. 3  An Interface does not contain any constructors. 4  An interface is not extended by a class; it is implemented by a class. 5  An interface can extend multiple interfaces. 1 An interface is just a contract, a description of the behavior an implementing class will have. 2  The implementing class ensures, that it will have these methods that can be used on it. 3  It is basically a contract or a promise the class has to make.
An interface is similar to a class in the following ways: An interface can contain any number of methods. An interface is written in a file with a .java extension, with the name of the interface matching the name of the file. The byte code of an interface appears in a .class file.
An interface in java is a blueprint of a class. It has static constants and abstract methods only. The interface in java is a mechanism to achieve fully abstraction. There can be only abstract methods in the java interface not method body. 
1 An interface implementation may be added to any existing third party class. 2  An interface can contain any number of methods. 3  In Java you cannot instantiate an interface. 4  An Interface does not contain any constructors. 5  An interface is not extended by a class; it is implemented by a class. 1 An interface is just a contract, a description of the behavior an implementing class will have. 2  The implementing class ensures, that it will have these methods that can be used on it. 3  It is basically a contract or a promise the class has to make.